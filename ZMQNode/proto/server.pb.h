// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_INCLUDED_server_2eproto
#define PROTOBUF_INCLUDED_server_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_2eproto 

namespace protobuf_server_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_2eproto
namespace CPG {
class ServiceHeartbeatMsg;
class ServiceHeartbeatMsgDefaultTypeInternal;
extern ServiceHeartbeatMsgDefaultTypeInternal _ServiceHeartbeatMsg_default_instance_;
class ServiceProfile;
class ServiceProfileDefaultTypeInternal;
extern ServiceProfileDefaultTypeInternal _ServiceProfile_default_instance_;
class ServiceRegisterRQ;
class ServiceRegisterRQDefaultTypeInternal;
extern ServiceRegisterRQDefaultTypeInternal _ServiceRegisterRQ_default_instance_;
class ServiceRegisterRS;
class ServiceRegisterRSDefaultTypeInternal;
extern ServiceRegisterRSDefaultTypeInternal _ServiceRegisterRS_default_instance_;
}  // namespace CPG
namespace google {
namespace protobuf {
template<> ::CPG::ServiceHeartbeatMsg* Arena::CreateMaybeMessage<::CPG::ServiceHeartbeatMsg>(Arena*);
template<> ::CPG::ServiceProfile* Arena::CreateMaybeMessage<::CPG::ServiceProfile>(Arena*);
template<> ::CPG::ServiceRegisterRQ* Arena::CreateMaybeMessage<::CPG::ServiceRegisterRQ>(Arena*);
template<> ::CPG::ServiceRegisterRS* Arena::CreateMaybeMessage<::CPG::ServiceRegisterRS>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CPG {

// ===================================================================

class ServiceProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPG.ServiceProfile) */ {
 public:
  ServiceProfile();
  virtual ~ServiceProfile();

  ServiceProfile(const ServiceProfile& from);

  inline ServiceProfile& operator=(const ServiceProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceProfile(ServiceProfile&& from) noexcept
    : ServiceProfile() {
    *this = ::std::move(from);
  }

  inline ServiceProfile& operator=(ServiceProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceProfile* internal_default_instance() {
    return reinterpret_cast<const ServiceProfile*>(
               &_ServiceProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServiceProfile* other);
  friend void swap(ServiceProfile& a, ServiceProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceProfile* New() const final {
    return CreateMaybeMessage<ServiceProfile>(NULL);
  }

  ServiceProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceProfile& from);
  void MergeFrom(const ServiceProfile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 3;
  void clear_addr();
  static const int kAddrFieldNumber = 3;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // int32 serviceType = 1;
  void clear_servicetype();
  static const int kServiceTypeFieldNumber = 1;
  ::google::protobuf::int32 servicetype() const;
  void set_servicetype(::google::protobuf::int32 value);

  // int32 socketType = 2;
  void clear_sockettype();
  static const int kSocketTypeFieldNumber = 2;
  ::google::protobuf::int32 sockettype() const;
  void set_sockettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPG.ServiceProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::int32 servicetype_;
  ::google::protobuf::int32 sockettype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceRegisterRQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPG.ServiceRegisterRQ) */ {
 public:
  ServiceRegisterRQ();
  virtual ~ServiceRegisterRQ();

  ServiceRegisterRQ(const ServiceRegisterRQ& from);

  inline ServiceRegisterRQ& operator=(const ServiceRegisterRQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceRegisterRQ(ServiceRegisterRQ&& from) noexcept
    : ServiceRegisterRQ() {
    *this = ::std::move(from);
  }

  inline ServiceRegisterRQ& operator=(ServiceRegisterRQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRegisterRQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRegisterRQ* internal_default_instance() {
    return reinterpret_cast<const ServiceRegisterRQ*>(
               &_ServiceRegisterRQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServiceRegisterRQ* other);
  friend void swap(ServiceRegisterRQ& a, ServiceRegisterRQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceRegisterRQ* New() const final {
    return CreateMaybeMessage<ServiceRegisterRQ>(NULL);
  }

  ServiceRegisterRQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRegisterRQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceRegisterRQ& from);
  void MergeFrom(const ServiceRegisterRQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceRegisterRQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CPG.ServiceProfile services = 2;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 2;
  ::CPG::ServiceProfile* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >*
      mutable_services();
  const ::CPG::ServiceProfile& services(int index) const;
  ::CPG::ServiceProfile* add_services();
  const ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >&
      services() const;

  // int32 serviceType = 1;
  void clear_servicetype();
  static const int kServiceTypeFieldNumber = 1;
  ::google::protobuf::int32 servicetype() const;
  void set_servicetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPG.ServiceRegisterRQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile > services_;
  ::google::protobuf::int32 servicetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceRegisterRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPG.ServiceRegisterRS) */ {
 public:
  ServiceRegisterRS();
  virtual ~ServiceRegisterRS();

  ServiceRegisterRS(const ServiceRegisterRS& from);

  inline ServiceRegisterRS& operator=(const ServiceRegisterRS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceRegisterRS(ServiceRegisterRS&& from) noexcept
    : ServiceRegisterRS() {
    *this = ::std::move(from);
  }

  inline ServiceRegisterRS& operator=(ServiceRegisterRS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceRegisterRS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRegisterRS* internal_default_instance() {
    return reinterpret_cast<const ServiceRegisterRS*>(
               &_ServiceRegisterRS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServiceRegisterRS* other);
  friend void swap(ServiceRegisterRS& a, ServiceRegisterRS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceRegisterRS* New() const final {
    return CreateMaybeMessage<ServiceRegisterRS>(NULL);
  }

  ServiceRegisterRS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRegisterRS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceRegisterRS& from);
  void MergeFrom(const ServiceRegisterRS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceRegisterRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CPG.ServiceProfile connectServices = 1;
  int connectservices_size() const;
  void clear_connectservices();
  static const int kConnectServicesFieldNumber = 1;
  ::CPG::ServiceProfile* mutable_connectservices(int index);
  ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >*
      mutable_connectservices();
  const ::CPG::ServiceProfile& connectservices(int index) const;
  ::CPG::ServiceProfile* add_connectservices();
  const ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >&
      connectservices() const;

  // @@protoc_insertion_point(class_scope:CPG.ServiceRegisterRS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile > connectservices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceHeartbeatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CPG.ServiceHeartbeatMsg) */ {
 public:
  ServiceHeartbeatMsg();
  virtual ~ServiceHeartbeatMsg();

  ServiceHeartbeatMsg(const ServiceHeartbeatMsg& from);

  inline ServiceHeartbeatMsg& operator=(const ServiceHeartbeatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceHeartbeatMsg(ServiceHeartbeatMsg&& from) noexcept
    : ServiceHeartbeatMsg() {
    *this = ::std::move(from);
  }

  inline ServiceHeartbeatMsg& operator=(ServiceHeartbeatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceHeartbeatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceHeartbeatMsg* internal_default_instance() {
    return reinterpret_cast<const ServiceHeartbeatMsg*>(
               &_ServiceHeartbeatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ServiceHeartbeatMsg* other);
  friend void swap(ServiceHeartbeatMsg& a, ServiceHeartbeatMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceHeartbeatMsg* New() const final {
    return CreateMaybeMessage<ServiceHeartbeatMsg>(NULL);
  }

  ServiceHeartbeatMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceHeartbeatMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceHeartbeatMsg& from);
  void MergeFrom(const ServiceHeartbeatMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceHeartbeatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 serviceType = 1;
  void clear_servicetype();
  static const int kServiceTypeFieldNumber = 1;
  ::google::protobuf::int32 servicetype() const;
  void set_servicetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CPG.ServiceHeartbeatMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 servicetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceProfile

// int32 serviceType = 1;
inline void ServiceProfile::clear_servicetype() {
  servicetype_ = 0;
}
inline ::google::protobuf::int32 ServiceProfile::servicetype() const {
  // @@protoc_insertion_point(field_get:CPG.ServiceProfile.serviceType)
  return servicetype_;
}
inline void ServiceProfile::set_servicetype(::google::protobuf::int32 value) {
  
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:CPG.ServiceProfile.serviceType)
}

// int32 socketType = 2;
inline void ServiceProfile::clear_sockettype() {
  sockettype_ = 0;
}
inline ::google::protobuf::int32 ServiceProfile::sockettype() const {
  // @@protoc_insertion_point(field_get:CPG.ServiceProfile.socketType)
  return sockettype_;
}
inline void ServiceProfile::set_sockettype(::google::protobuf::int32 value) {
  
  sockettype_ = value;
  // @@protoc_insertion_point(field_set:CPG.ServiceProfile.socketType)
}

// string addr = 3;
inline void ServiceProfile::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceProfile::addr() const {
  // @@protoc_insertion_point(field_get:CPG.ServiceProfile.addr)
  return addr_.GetNoArena();
}
inline void ServiceProfile::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CPG.ServiceProfile.addr)
}
#if LANG_CXX11
inline void ServiceProfile::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPG.ServiceProfile.addr)
}
#endif
inline void ServiceProfile::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPG.ServiceProfile.addr)
}
inline void ServiceProfile::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPG.ServiceProfile.addr)
}
inline ::std::string* ServiceProfile::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:CPG.ServiceProfile.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceProfile::release_addr() {
  // @@protoc_insertion_point(field_release:CPG.ServiceProfile.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceProfile::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:CPG.ServiceProfile.addr)
}

// -------------------------------------------------------------------

// ServiceRegisterRQ

// int32 serviceType = 1;
inline void ServiceRegisterRQ::clear_servicetype() {
  servicetype_ = 0;
}
inline ::google::protobuf::int32 ServiceRegisterRQ::servicetype() const {
  // @@protoc_insertion_point(field_get:CPG.ServiceRegisterRQ.serviceType)
  return servicetype_;
}
inline void ServiceRegisterRQ::set_servicetype(::google::protobuf::int32 value) {
  
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:CPG.ServiceRegisterRQ.serviceType)
}

// repeated .CPG.ServiceProfile services = 2;
inline int ServiceRegisterRQ::services_size() const {
  return services_.size();
}
inline void ServiceRegisterRQ::clear_services() {
  services_.Clear();
}
inline ::CPG::ServiceProfile* ServiceRegisterRQ::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:CPG.ServiceRegisterRQ.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >*
ServiceRegisterRQ::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:CPG.ServiceRegisterRQ.services)
  return &services_;
}
inline const ::CPG::ServiceProfile& ServiceRegisterRQ::services(int index) const {
  // @@protoc_insertion_point(field_get:CPG.ServiceRegisterRQ.services)
  return services_.Get(index);
}
inline ::CPG::ServiceProfile* ServiceRegisterRQ::add_services() {
  // @@protoc_insertion_point(field_add:CPG.ServiceRegisterRQ.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >&
ServiceRegisterRQ::services() const {
  // @@protoc_insertion_point(field_list:CPG.ServiceRegisterRQ.services)
  return services_;
}

// -------------------------------------------------------------------

// ServiceRegisterRS

// repeated .CPG.ServiceProfile connectServices = 1;
inline int ServiceRegisterRS::connectservices_size() const {
  return connectservices_.size();
}
inline void ServiceRegisterRS::clear_connectservices() {
  connectservices_.Clear();
}
inline ::CPG::ServiceProfile* ServiceRegisterRS::mutable_connectservices(int index) {
  // @@protoc_insertion_point(field_mutable:CPG.ServiceRegisterRS.connectServices)
  return connectservices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >*
ServiceRegisterRS::mutable_connectservices() {
  // @@protoc_insertion_point(field_mutable_list:CPG.ServiceRegisterRS.connectServices)
  return &connectservices_;
}
inline const ::CPG::ServiceProfile& ServiceRegisterRS::connectservices(int index) const {
  // @@protoc_insertion_point(field_get:CPG.ServiceRegisterRS.connectServices)
  return connectservices_.Get(index);
}
inline ::CPG::ServiceProfile* ServiceRegisterRS::add_connectservices() {
  // @@protoc_insertion_point(field_add:CPG.ServiceRegisterRS.connectServices)
  return connectservices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPG::ServiceProfile >&
ServiceRegisterRS::connectservices() const {
  // @@protoc_insertion_point(field_list:CPG.ServiceRegisterRS.connectServices)
  return connectservices_;
}

// -------------------------------------------------------------------

// ServiceHeartbeatMsg

// int32 serviceType = 1;
inline void ServiceHeartbeatMsg::clear_servicetype() {
  servicetype_ = 0;
}
inline ::google::protobuf::int32 ServiceHeartbeatMsg::servicetype() const {
  // @@protoc_insertion_point(field_get:CPG.ServiceHeartbeatMsg.serviceType)
  return servicetype_;
}
inline void ServiceHeartbeatMsg::set_servicetype(::google::protobuf::int32 value) {
  
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:CPG.ServiceHeartbeatMsg.serviceType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CPG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_2eproto
